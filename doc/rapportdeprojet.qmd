---
title: "Rapport de Projet R et Julia"
author: "Emma Roume et Jade Bordet"
date: "10/12/2024"
format: html
pdf: default
word: default
---

## Introduction 

Dans le cadre de notre Master 1 en Statistique et Science des Donn√©es, nous avons r√©alis√© un projet dans le cadre des UE Logiciels Sp√©cialis√©s (parties sur R et Julia) et l'UE Outils de pr√©sentation et de recherche reproductible. Ce projet avait pour principal objectif de consolider et d√©velopper nos comp√©tences en programmation avec R mais aussi de d√©couvrir le logiciel Julia. Il fallait faire en deux modes, en mode utilisateur : Environnement de travail ; Notion de package (installation, utilisation); Introduction des natures et structures R de base; Extraction de donn√©es avec application sur donn√©es r√©elles. Mais aussi, en mode d√©veloppeur : Programmation fonctionnelle ; Cr√©ation de package; Programmation orient√©e objet (S3); Introduction au package RCpp pour booster les ex√©cutions des codes R.

Nous disposions d'une totale libert√© dans le choix de sujet de notre projet, une approche qui visait √† stimuler notre engagement et √† encourager notre cr√©ativit√© (merci Remy).

Ce rapport retrace notre parcours tout au long de ce projet, une aventure pleine de d√©fi et ou on a failli s'arracher les cheveux √† de multiple reprise. La mise en place a n√©cessit√© une bonne dose d'organisation et de pers√©v√©rance.

Ce document sert √©galement de synth√®se, il va nous permettre de revenir sur les difficult√©s, les points forts et faibles de notre projet mais aussi de pr√©senter la strat√©gie mise en place.


## D√©but de notre projet

Nous avons d‚Äôabord cherch√© un sujet qui pouvait nous plaire √† toutes les deux. Apr√®s r√©flexion on a d√©cid√© de partir sur le sport en g√©n√©ral, Jade √©tant tr√®s sportive et moi qui adore regarder le sport √† la t√©l√© ! La gymnastique √©tant un sport que nous appr√©cions toutes les deux nous sommes donc parties sur cela. En discutant d‚Äôavantage une id√©e nous est venue : est -il possible de pr√©dire les prochaines m√©dailles olympiques aux JO 2028 en gymnastique ? 

Un m√©lange de ce que l‚Äôon aime toutes les deux et un d√©fi sympa √† r√©aliser (irr√©alisable finalement‚Ä¶)

Qui dis pr√©diction dis Machine Learning notre projet serait donc de cr√©er un algorithme de machine Learning dans le but de pr√©dire les prochaines m√©dailles au JO.

Au d√©but de notre projet on a vite r√©alis√© qu‚Äôil √©tait essentiel pour nous de trouver une base de donn√©es adapt√©e, contenant toutes les variables n√©cessaires pour r√©aliser notre projet et faire une classification. Notre premi√®re id√©e √©tait de cr√©er notre propre base de donn√©es. Ce qui aurait tr√®s int√©ressant pour avoir un contr√¥le sur les donn√©es dont on avait besoin, mais on s‚Äôest tr√®s vite rendu compte que cette t√¢che serait tr√®s compliqu√©e. Cr√©er une base de donn√©es avec toutes les variables dont nous avons besoin aurait √©t√© une perte de temps consid√©rable. De plus ce travail n‚Äôest pas adapt√© au cours dans le quelle nous somme mais plus √† un cours de base de donn√©es. Ce travail nous aurait pris plus de temps que de cr√©er le code, donc on a abandonn√© l‚Äôid√©e.

Pour gagner en efficacit√© sur ce projet, on a alors commenc√© nos recherches pour trouver une base de donn√©es d√©j√† existante. Nous avons explor√© plusieurs sites jusqu‚Äô√† ce que nous tombions sur une base de donn√©es Kaggle qui r√©pondait parfaitement √† nos besoins. Ce jeu de donn√©es contenait toutes les variables n√©cessaires pour construire notre mod√®le de classification. Ce qui nous a permis de nous concentrer sur la mod√©lisation, et l‚Äôimpl√©mentation d‚Äôalgorithmes.

## MedalsPrediction

Une fois la base de donn√©es choisie nous avons d√©cid√© d‚Äôutiliser Julia pour cr√©er notre algorithme de machine Learning. Julia √©tant un langage que nous connaissions peu, mais il nous l‚Äôa √©t√© vendu comme super performant alors quoi de mieux que Julia pour impl√©menter cet algorithme ! Nous avons vu ce projet comme une opportunit√© de nous familiariser avec Julia en appliquant des concepts de machine Learning, ce qui nous a permis d‚Äô√©largir nos comp√©tences et de d√©couvrir tous ses atouts.

Pour le choix de l‚Äôalgorithme, nous avons opt√© pour Random Forest. Cet algorithme est particuli√®rement r√©put√© pour sa robustesse et ses performances dans les taches de classification. Il fonctionne en combinant les pr√©dictions de plusieurs arbres ind√©pendant chacun √©tant construit sur un sous-√©chantillon al√©atoire des donn√©es. C‚Äôest cette robustesse qui a motiv√© notre choix.

Pour d√©buter a coder, la premi√®re √©tape a √©t√© de nettoyer la base de donn√©es. Cela m‚Äôa pris pas mal de temps car j‚Äôai voulu effectuer ce nettoyage √† la fois sur R et sur Julia, afin de comparer et de m‚Äôexercer sur les deux langages. J‚Äôai donc commenc√© par nettoyer une premi√®re base de donn√©es, mais j‚Äôai ensuite d√©couvert qu‚Äôelle ne contenait des r√©sultats que jusqu‚Äôen 2016, ce qui ne correspondait pas du tout √† ce que je voulais. 

Le nettoyage de la base de donn√©es a impliqu√© plusieurs √©tapes importantes. La base de donn√©es d‚Äôorigines √©tait tr√®s large et contenait des donn√©es pour tous les sports des Jeux olympiques. J‚Äôai donc commenc√© par filtrer les donn√©es pour ne conserver uniquement les lignes ou la gymnastique apparaissait comme discipline. Ensuite j‚Äôai restreint la p√©riode d‚Äôanalyse aux ann√©es 2008 et 2020 afin de pouvoir entrainer l‚Äôalgorithme.

Une autre √©tape assez importante a √©t√© le traitement de la variable m√©daille, comme cette variable contenait des valeurs manquantes, cela s‚Äôexpliquait par le fait que la personne sur la ligne n‚Äôavait pas gagn√© de m√©daille, j‚Äôai choisi de remplacer par une nouvelle cat√©gorie intitul√©e ¬´ no medals ¬ª pour bien signifier que le participant n‚Äôavait rien remport√©.

Par la suite j‚Äôai transform√© les cat√©gories textuelles gold, silver, bronze et no medals en valeur num√©rique (1, 2, 3 et 0 respectivement). Cette conversion est essentielle, car l‚Äôalgorithme Random Forest, travaille avec des donn√©es num√©riques et non textuelles. En transformant les cat√©gories en √©tiquettes num√©riques, j‚Äôai rendu la variable exploitable pour l‚Äôentrainement de notre mod√®le. 

Enfin, j‚Äôai √©galement modifi√© la variable event, qui contenait les noms des diff√©rents agr√©es de gymnastique. Ces noms √©taient souvent trop longs et en anglais, ce qui n‚Äô√©tait pas tr√®s pratique pour travailler et comprendre les donn√©es. J‚Äôai donc traduit les noms des disciplines en fran√ßais et je les ai remplac√©s par des termes correspondant aux agr√©es de gymnastique comme sol, poutre‚Ä¶ Cette √©tape avait pour but de rendre les donn√©es plus compr√©hensible et accessible pour l‚Äôutilisation.

Ce nettoyage a √©t√© donc une √©tape essentielle pour pr√©parer les donn√©es avant d‚Äôappliquer l‚Äôalgorithme de machine Learning. Il a permis de transformer une base de donn√©es pour la rendre pr√™te √† l‚Äôemploi.

Pour chaque √©tape du projet, on a d√©cid√© de cr√©er des fonctions sp√©cifiques. D‚Äôabord j‚Äôai √©crit une fonction pour nettoyer la base de donn√©es, puis une autre pour entrainer le mod√®le avec l‚Äôalgorithme Random Forest. C‚Äôest √† ce moment la que je me suis retrouv√© face √† une erreur que j‚Äôai mis √©norm√©ment de temps √† r√©soudre.

Mon probl√®me √©tait que je n‚Äôarrivais pas √† trouver une fonction qui me permettait de convertir toutes mes variables cat√©gorielles textuelles en variables num√©riques, tout en √©vitant l‚Äôimplication d‚Äôune relation d‚Äôordre entre les cat√©gories. Par exemple, l‚Äôalgorithme pourrait interpr√©ter que le fait de mettre femelle=1 et male =2, signifierait 1<2, mais ce n‚Äôest pas le cas.

C‚Äôest la qu‚Äôintervient la fonction One-Hot-Encoding. Cette fonction permet de convertir des cat√©gories textuelles en plusieurs colonnes binaires ind√©pendantes. Par exemple pour la variable sex, elle va cr√©er deux colonnes distinctes : sex_male, sex_female. Pour caque ligne de la base de donn√©es la colonne sex_male prendra 1 si la personne est un homme et 0 sinon et de m√™me pour la colonne sex_female. Cette transformation supprime toute notion d‚Äôordre implicite et est beaucoup mieux adapt√© pour l‚Äôalgorithme Random Forest, qui fonctionne avec des valeurs num√©riques.

Malheureusement pour moi la fonction de One-Hot-Encoding d√©j√† impl√©ment√©e sur Julia ne fonctionnait pas correctement dans mon code. J‚Äôai donc d√©cider de cr√©er ma propre fonction en m‚Äôinspirant de fonction trouv√©e sur internet. Apr√®s quelques essais et ajustement, j‚Äôai r√©ussi a obtenir une fonction op√©rationnelle.

La derni√®re fonction que j‚Äôai cr√©√©e permet d‚Äô√©valuer le mod√®le apr√®s l‚Äôentrainement, en calculant plusieurs scores d‚Äô√©valuation comme l‚Äôaccuracy, la pr√©cision et la matrice de confusion. Cela m‚Äôa permis de mieux comprendre les performances du mod√®le, qui n‚Äô√©tait pas tr√®s bonnes üòä 

Enfin l‚Äôune des derni√®res √©tapes de mon code consistait √† afficher les r√©sultats sous la forme suivante : je voulais lister, pour chaque cat√©gorie, le nom des athl√®tes ainsi que la m√©daille qu‚Äôils avaient remport√©e.

En ce qui concerne les r√©sultats, la bonne nouvelle est que j‚Äôarrive effectivement √† obtenir des pr√©dictions et √† faire tourner mon code, mais malheureusement, elles ne sont pas du tout satisfaisantes. Mon accuracy est tr√®s faible, ce qui signifie que le mod√®les ne parvient pas √† faire de bonnes pr√©dictions. Le principal probl√®me est que je re√ßois des r√©sultats dupliqu√©s. Par exemple, pour la cat√©gorie ¬´ barre asym√©trique ¬ª, le mod√®le pr√©dit deux voir trois personnes remportant la m√©daille d‚Äôor, ce qui est √©videmment impossible. Et parfois m√™me elle ne trouvait personne remportant la m√©daille d‚Äôor, il y avait des trous.

Je pense que l‚Äôalgorithme a appris que plusieurs personnes peuvent avoir la m√™me proba de gagner une m√©daille, sans comprendre qu‚Äôil ne peut y avoir qu‚Äôun seul gagnant par m√©daille dans chaque cat√©gorie. Ce probl√®me peut aussi venir du fait que ma base de donnes est relativement petite, apr√®s avoir √©l√©mine les lignes inutiles, je n‚Äôavais plus qu‚Äôune centaine de lignes, ce qui n‚Äôest pas du tout satisfaisant pour entrainer correctement un mod√®le de ce genre. Je pense que c‚Äôest ce qui a fait que parfois il ne me donnait personne pour la m√©daille d‚Äôor surement que les lignes avaient √©t√© supprim√©es.

Voici ce que j'obtiens:

```{julia}
using ProjetRJulia
using DataFrames
using MLJ

#On pr√©pare la base de donn√©e et on charge
filtered_data = ProjetRJulia.load_data2()

#Entrainement et predicton du mod√®le
model, y_test, y_pred=train_model2(filtered_data)

#Je veux dans mon r√©sultat, le nom, la m√©daille gagn√©e et dans quelle event 
prediction = DataFrame(Name = filtered_data.Name[partition(eachindex(filtered_data.Medal), 0.7)[2]], pred_Medal = y_pred, Event = filtered_data.Event[partition(eachindex(filtered_data.Medal), 0.7)[2]])

resultat_par_evnmt = groupby(prediction, :Event)

```

Au final, j‚Äôai compris que ce projet dans cette forme la, n‚Äô√©tait pas totalement r√©alisable, Le manque de donn√©es suffisantes et la difficult√© √† faire en sorte que l‚Äôalgorithme apprenne correctement ont limit√© la performance du mod√®le. Ca nous a permis de prendre conscience de l‚Äôimportance de la qualit√© et de la taille des donn√©es dans la cr√©ation d‚Äôun algorithme de machine Learning.

## BreastCancer

Histoire de quand m√™me avancer dans notre apprentissage du machine learning, de comprendre son fonctionnement et rendre un code assez potable, nous avons r√©fl√©chie a une alternative. Nous nous sommes mis d‚Äôaccord sur l‚Äôid√©e de r√©aliser deux algorithmes de Machine Learning : un pour la pr√©diction des m√©dailles (m√™mes si les r√©sultats ne sont pas bons) et un autre bas√© sur une autre base de donn√©es plus grande et plus fiable.

Nous avons donc d√©cider de cr√©er un autre algorithme sur une autre base de donn√©es, beaucoup plus grande cette fois. Pour ce deuxi√®me algorithme, nous avons choisi de travailler avec une base de donn√©es sur le cancer du sein. Le but ici √©tait d‚Äôobtenir de bons r√©sultats en termes d‚Äôaccuracy, de pr√©cision et d‚Äôautres m√©triques d‚Äô√©valuations. J‚Äôai donc nettoy√© cette base de donn√©es, puis entrain√© le mod√®le de Random Forest et √©valu√© la performance du mod√®le, exactement de la m√™me mani√®re que pour la pr√©diction de m√©daille et toujours sur Julia.

Apr√®s avoir obtenu les r√©sultats, nous nous sommes dit ¬´ Pourquoi pas comparer les performances de R et Julia en machine learning ? ¬ª.  J‚Äôai donc r√©√©crit un algorithme similaire en R et en utilisant le package caret et l‚Äôalgorithme Random Forest, pour comparer les r√©sultats avec ceux g√©n√©r√©s par Julia. Comme on le pressentais, les r√©sultats √©taient meilleurs avec Julia. En effet, pour les m√™mes hyperparam√®tres et les m√™mes donn√©es d‚Äôentr√©e, les performances du mod√®le en Julia √©taient meilleures en termes d‚Äôaccuracy, de pr√©cision et des autres m√©triques d‚Äô√©valuation.
Voici les performances en Julia:

```{julia, echo=false}

using ProjetRJulia

#Charger le dataset
data = ProjetRJulia.load_data()

#Entrainement et predicton du mod√®le pour le cancer du sein
model, y_test, y_pred=train_model(data)

accuracy, cm, recall_score, f1_score = evaluate_model(y_test, y_pred)
```

Pour moi, la principale raison de cette diff√©rence r√©side dans la nature des langages. R est un langage interpr√©t√©, ce qui signifie que chaque ligne de code est traduite et ex√©cut√©e √† la vol√©e par l‚Äôinterpr√©teur. √áa peut entrainer des ralentissements, surtout quand il s‚Äôagit de tache intensive comme la cr√©ation des arbres de d√©cision. Julia lui est un langage compil√© √† la vol√©e, ce qui lui permet d‚Äôex√©cuter des codes plus rapidement et plus efficacement. Cette diff√©rence de fonctionnement a donc un impact direct sur les performances, particuli√®rement pour des algorithmes de machine Learning qui n√©cessitent des calculs r√©p√©titifs sur de grandes quantit√© de donn√©es
Donc pour mon code, Julia a montr√© de meilleures performances en machine Learning.

## Visualisations

J‚Äôai essay√© de faire quelques visualisations sur R et Julia. L‚Äôid√©e √©tait de faire de graphique comme des histogrammes et d‚Äôautres visualisation que nous allons ins√©rer par la suite dans notre application shiny. 

Voici quelques exemples de visualisations faites:

```{julia, echo=FALSE}
using ProjetRJulia
using DataFrames
using Plots
using StatsPlots

gr()

#Charger le dataset
data = ProjetRJulia.load_data()

p1=histogram(data.radius_mean,title="Histogramme radius_mean", xlabel="radius_mean", ylabel="Fr√©quence", legend=false)

p2=histogram(data.area_mean,title="Histogramme area_mean", xlabel="area_mean", ylabel="Fr√©quence", legend=false)

p3=violin(data.symmetry_mean, title="Violinplot de symmetry_mean", xlabel="symmetry_mean", ylabel="Category", legend=false)

p4=violin(data.texture_mean, title="Violinplot de texture_mean", ylabel="texture_mean", xlabel="Category", legend=false)

color_map = Dict(0 => :red, 1 => :blue)

p5=boxplot(data.diagnosis, data.area_se, title="Boxplot of area_se by Diagnosis", xlabel=["B√©nin","Malin"], ylabel="area_se", legend=false)

p6=boxplot(data.diagnosis, data.concavity_worst, title="Boxplot of concavity_worst by Diagnosis", xlabel=["B√©nin","Malin"], ylabel="concavity_worst", legend=false)

# Afficher les graphiques dans un layout
plot(p1, p2, p3, p4, p5, p6, layout=(3, 2),size=(1000, 800))

```



J‚Äôai aussi essay√© de me servir de Rulia pour quand m√™me essayer un petit peu mais j‚Äôai beaucoup de mal √† comprendre et avec tout les autres probl√®mes qui sont apparus je n‚Äôai pas bien eu le temps de m‚Äôy int√©resser plus.

## Cr√©ation de Packages

Un des derni√®res √©tapes de notre projet a √©t√© de cr√©er les packages qui regroupe toutes nos fonctions cr√©√©es pour les rendre facilement r√©utilisables. Nous avons cr√©√© un package R et un autre Julia. Ce qui a √©t√© tr√®s compliqu√© au d√©but surtout pour le package Julia.

Pour Julia j‚Äôai commenc√© par suivre un tutoriel trouv√© en ligne, qui expliquait comment cr√©er un package manuellement. Ce tuto montrait comment structurer correctement le package en d√©finissant un module portant le nom que l‚Äôon voulait pour le package. Il indiquait √©galement la hi√©rarchie n√©cessaire avec des dossiers comme src/, les fichier Project.toml‚Ä¶ J‚Äôai donc compris la structure g√©n√©rale, mais la configuration √©tait trop compliqu√©e. Heureusement nous avons eu un magnifique tuto cr√©er par Mr Remy qui nous a expliqu√© en d√©tails comment cr√©er un package Julia de mani√®re standard, ce qui m‚Äôa permis de corriger ce que j‚Äôavais fats pr√©c√©demment, maintenant on est des expertes dans la cr√©ation de package.

Un des probl√®mes que j‚Äôai rencontr√© dans la cr√©ation de mon package, concern√© le d√©p√¥t sur GitHub. Lors de la cr√©ation de mon repository, je cochais syst√©matiquement la case ¬´ Add a README file ¬ª qui provoquait des conflits avec les fichiers que j‚Äôessayais de push. J‚Äôai donc du recr√©er plusieurs fois un package avant de comprendre d‚Äôo√π venait l‚Äôerreur. Une autre erreur qui apparait, tous mes push depuis la cr√©ation du package ont des erreurs mais toutes les mises a jour que je fais sont bien dans le GitHub alors je ne comprends pas. Finalement j‚Äôai r√©ussi √† tout configurer correctement et j‚Äôai nomm√© mon package ProjetRJulia.jl qui est d√©sormais fonctionnel et accessible.

Le plus grand d√©fi que j‚Äôai rencontr√© lors de la cr√©ation de mon package a √©t√© la mise en place et le processus de push sur GitHub. A chaque tentative de push, sans exception (je ne mens pas) j‚Äôai rencontr√© des √©checs. Il y avait toujours un probl√®me, ce qui m‚Äôa demand√© √©norm√©ment de temps pour tout r√©soudre.

Au d√©but le probl√®me principal venait des packages utilis√©s dans mon code. Ils n‚Äô√©taient pas correctement int√©gr√©s dans mon package ProjetRJulia.jl. Ce qui g√©n√©rait des erreurs lors de l‚Äôex√©cution. Pour r√©soudre √ßa, j‚Äôai d√ª m‚Äôassurer que tous les packages n√©cessaires √©taient bien charg√©s dans le fichier Project.toml avant de pouvoir pousser les premiers commits.

Ensuite j‚Äôai rencontr√© des probl√®mes de version. Mon package √©tait d√©fini avec la version 1.10 mais certains des autres packages, comme Pkg, √©taient sur la version 1.11, qui correspond √† la derni√®re version de Julia. Ce qui a caus√© des conflits de version lors du push. De m√™me, les packages ScikitLearn cherchait √† installer des versions de packages plus anciennes que celles d√©j√† pr√©sentes sur mon syst√®me, ce qui a provoqu√© des erreurs, encore. Pour r√©soudre ce probl√®me j‚Äôai du supprimer tous les packages et r√©installer ScikitLearn en premier, puis ajouter les autres packages par la suite dans le bon ordre.

Le dernier probl√®me √©tait li√© √† la gestion de la base de donn√©es. Sur GitHub, le chemin pour acc√©der a mon fichier de donn√©es n‚Äô√©tait pas valide, car il faisait r√©f√©rence au chemin local de mon ordinateur. Pour contourner ce probl√®me, j‚Äôai cr√©√© une fonction permettant de charger dynamiquement le dataset, de mani√®re que le package puisse √™tre utilis√© par n‚Äôimporte qui, peu importe ou il est install√©. Cette fonction ne d√©pend d√©sormais que du r√©pertoire sp√©cifi√© dans le package, ce qui rend l‚Äôutilisation du package plus flexible et compatible sur diff√©rentes machines.

En r√©sume, la configuration correcte de l‚Äôenvironnement, la gestion des versions des packages et l‚Äôadaptation du code pour √©viter les d√©pendances sp√©cifiques √† mon syst√®me local ont √©t√© des √©tapes cl√©s pour r√©soudre ces probl√®mes et r√©ussir √† mettre en place et pousser sur GitHub.

Pour le package R, nous avions d√©velopp√© plusieurs scripts R, notamment pour l‚Äôapplication Shiny et pour l‚Äôalgorithme de machine Learning et il fallait les placer dans un package. J‚Äôai suivi un autre tutoriel en ligne qui expliquait √©tape par √©tape comment cr√©er un package R en utilisant les outils de base. Apr√®s avoir v√©rifi√© que tout fonctionnait correctement, j‚Äôai √©galement d√©pos√© ce package sur GitHub afin de le rendre accessible et r√©utilisable par d‚Äôautres.

En conclusion cette √©tape de cr√©ation de package a √©t√© une exp√©rience enrichissante, m√™me si ca a √©t√© compliqu√©. Elle nous a permis de mieux comprendre les bonnes pratiques de structuration de projet en Julia et en R et  l‚Äôutilit√©s de l‚Äôint√©gration avec GitHub.







